/* @theme: default; */

@use 'sass:map';
@use 'sass:list';

.btn {
    // Render General Styles
    @include render-var-properties($btn-general, $btn-var-prefix);

    // Render Default Size
    @include render-var-properties(map.get($btn-sizes, 'default'), $btn-var-prefix);

    // Render Default Styles
    @if map.has-key($btn-palette, 'default', 'default') {
        @include render-var-properties(map.get($btn-palette, 'default', 'default'), $btn-var-prefix);
    }

    &:hover {
        @if map.has-key($btn-palette, 'default', 'hover') {
            @include render-var-properties(
                map.get($btn-palette, 'default', 'hover'),
                '#{$btn-var-prefix}-hover'
            );
        }

        // Disable text-decoration if we use link as button
        text-decoration: $btn-hover-text-decoration;
    }

    &:focus {
        @if map.has-key($btn-palette, 'default', 'focus') {
            @include render-var-properties(
                map.get($btn-palette, 'default', 'focus'),
                '#{$btn-var-prefix}-focus'
            );
        }
    }

    @if map.has-key($btn-palette, 'default', 'active') {
        &:active {
            @include render-var-properties(
                map.get($btn-palette, 'default', 'active'),
                '#{$btn-var-prefix}-active'
            );
        }
    }

    @if map.has-key($btn-palette, 'default', 'disabled') {
        &:disabled,
        &.disabled {
            @include render-var-properties(
                map.get($btn-palette, 'default', 'disabled'),
                '#{$btn-var-prefix}-disabled'
            );
        }
    }

    &:not(:disabled) {
        cursor: $btn-cursor;
    }

    // Render Theme Styles
    @each $theme-key, $theme-value in $btn-palette {
        @if $theme-key != 'default' {
            &--#{$theme-key} {
                @include render-states($theme-value, $btn-var-prefix, $theme-key);
            }
        }
    }
}

.btn--size {
    // Render Sizes
    @each $size-key, $size-value in $btn-sizes {
        @if $size-key != 'default' {
            &-#{$size-key} {
                @include render-properties($size-value);
            }
        }
    }
}

.btn--text {
    &,
    &:hover,
    &:focus,
    &:active,
    &:disabled,
    &.disabled {
        border-color: transparent;
    }
}

.btn--icon {
    @include render-properties(map.get($btn-icon-offsets, 'default'));

    @each $size-key, $size-value in $btn-icon-offsets {
        @if $size-key != 'default' {
            &.btn--size-#{$size-key} {
                @include render-properties($size-value);
            }
        }
    }
}

.btn--circle {
    border-radius: 50%;

    @include render-properties(map.get($btn-circle-offsets, 'default'));

    @each $size-key, $size-value in $btn-circle-offsets {
        @if $size-key != 'default' {
            &.btn--size-#{$size-key} {
                @include render-properties($size-value);
            }
        }
    }
}

.btn--no-padding {
    padding-inline: $btn-no-padding-inline;
}

.btn--full,
.btn--block {
    width: 100%;
}

.btn--block {
    display: $btn-block-display;
}
